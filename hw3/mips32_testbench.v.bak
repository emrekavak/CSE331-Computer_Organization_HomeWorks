`define DELAY 10
module mips32_testbench ();

reg [31:0] instruction_set;
wire[31:0] result;


mips32 test(instruction_set,result);
initial begin

instruction_set = 32'b00000000100001010011000000100000;  // rs=$4 rt=$5 rd=$6 6=4+5 			add  6 4 5
#`DELAY;

instruction_set = 32'b00000000110001110100000000100001;  // rs=$6 rt=$7 rd=$8 8=6+7 			addu  8 6 7
#`DELAY;


instruction_set = 32'b00000000111010000100100000100010;  // rs=$7 rt=$8 rd=$9 9=7-8 			sub  9 7 8
#`DELAY;

instruction_set = 32'b00000001001010000101000000100011;  // rs=$9 rt=$8 rd=$10 s10=9-8 		subu  10 9 8
#`DELAY;


instruction_set = 32'b00000001001010000101100000100100;  // rs=$9 rt=$8 rd=$11 11=9.8 			and  11 9 8
#`DELAY;


instruction_set = 32'b00000001001010000110000000100101;  // rs=$9 rt=$8 rd=$12 12=9+8 			or  12 9 8
#`DELAY;

instruction_set = 32'b00000001001010000110100000100111;  // rs=$21 rt=$20 rd=$22 13=9nor8		nor  13 9 8
#`DELAY;


instruction_set = 32'b00000000000010010111000001000000;  // shampt = 1 rt=$9 rd=$14 			sll  14 9 1
#`DELAY;


instruction_set = 32'b00000000000010010111100011000010;  // shampt = 3 rt=$7 rd=$8 				srl  15 9 1
#`DELAY;


instruction_set = 32'b00000001110011111000000000101011;  // rs=$16 rt=$15 rd=$18 18=16sltu15 	sltu  16 14 15
#`DELAY;

end
initial
begin
$monitor("opcode = %6b | rs = %5b | rt = %5b | rd = %5b | shampt = %5b | func = %6b\n New rd =%32b \n",instruction_set[31:26],
	instruction_set[25:21],instruction_set[20:16],instruction_set[15:11],instruction_set[10:6],instruction_set[5:0],result);
end


endmodule